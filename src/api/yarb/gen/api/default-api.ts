// tslint:disable
/// <reference path="../custom.d.ts" />
/**
 * YARB API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

import { Board } from '../model';
import { CreateBoard } from '../model';
import { CreateBoardNote } from '../model';
import { CreatedResponse } from '../model';
import { InternalErrorMessage } from '../model';
import { LoginData } from '../model';
import { UpdateBoardNote } from '../model';
import { User } from '../model';
import { UserCredentials } from '../model';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new board
         * @summary createBoard
         * @param {CreateBoard} [createBoard] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBoard(createBoard?: CreateBoard, options: any = {}): RequestArgs {
            const localVarPath = `/boards`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"CreateBoard" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createBoard !== undefined ? createBoard : {}) : (createBoard || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new note
         * @summary createNote
         * @param {CreateBoardNote} [createBoardNote] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNote(createBoardNote?: CreateBoardNote, options: any = {}): RequestArgs {
            const localVarPath = `/notes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"CreateBoardNote" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createBoardNote !== undefined ? createBoardNote : {}) : (createBoardNote || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new user
         * @summary createUser
         * @param {UserCredentials} [userCredentials] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userCredentials?: UserCredentials, options: any = {}): RequestArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"UserCredentials" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userCredentials !== undefined ? userCredentials : {}) : (userCredentials || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a note
         * @summary deleteNote
         * @param {number} noteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNote(noteId: number, options: any = {}): RequestArgs {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling deleteNote.');
            }
            const localVarPath = `/notes/{noteId}`
                .replace(`{${"noteId"}}`, encodeURIComponent(String(noteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete one vote for the note
         * @summary deleteVote
         * @param {number} noteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVote(noteId: number, options: any = {}): RequestArgs {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling deleteVote.');
            }
            const localVarPath = `/notes/{noteId}/vote`
                .replace(`{${"noteId"}}`, encodeURIComponent(String(noteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get board by Id
         * @summary getBoard
         * @param {number} boardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoard(boardId: number, options: any = {}): RequestArgs {
            // verify required parameter 'boardId' is not null or undefined
            if (boardId === null || boardId === undefined) {
                throw new RequiredError('boardId','Required parameter boardId was null or undefined when calling getBoard.');
            }
            const localVarPath = `/boards/{boardId}`
                .replace(`{${"boardId"}}`, encodeURIComponent(String(boardId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get boards by owner
         * @summary getBoardsByOwner
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardsByOwner(userId: number, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getBoardsByOwner.');
            }
            const localVarPath = `/boards`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user
         * @summary getUser
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: number, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUser.');
            }
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create token by user credentials and get userId
         * @summary login
         * @param {UserCredentials} [userCredentials] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(userCredentials?: UserCredentials, options: any = {}): RequestArgs {
            const localVarPath = `/auth/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"UserCredentials" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userCredentials !== undefined ? userCredentials : {}) : (userCredentials || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add one vote for the note
         * @summary postVote
         * @param {number} noteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVote(noteId: number, options: any = {}): RequestArgs {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling postVote.');
            }
            const localVarPath = `/notes/{noteId}/vote`
                .replace(`{${"noteId"}}`, encodeURIComponent(String(noteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh a token and get userId
         * @summary refreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(options: any = {}): RequestArgs {
            const localVarPath = `/auth/token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a note
         * @summary updateNote
         * @param {number} noteId 
         * @param {UpdateBoardNote} [updateBoardNote] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNote(noteId: number, updateBoardNote?: UpdateBoardNote, options: any = {}): RequestArgs {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling updateNote.');
            }
            const localVarPath = `/notes/{noteId}`
                .replace(`{${"noteId"}}`, encodeURIComponent(String(noteId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"UpdateBoardNote" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateBoardNote !== undefined ? updateBoardNote : {}) : (updateBoardNote || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create new board
         * @summary createBoard
         * @param {CreateBoard} [createBoard] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBoard(createBoard?: CreateBoard, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).createBoard(createBoard, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new note
         * @summary createNote
         * @param {CreateBoardNote} [createBoardNote] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNote(createBoardNote?: CreateBoardNote, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).createNote(createBoardNote, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create new user
         * @summary createUser
         * @param {UserCredentials} [userCredentials] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userCredentials?: UserCredentials, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).createUser(userCredentials, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a note
         * @summary deleteNote
         * @param {number} noteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNote(noteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).deleteNote(noteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete one vote for the note
         * @summary deleteVote
         * @param {number} noteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVote(noteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).deleteVote(noteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * get board by Id
         * @summary getBoard
         * @param {number} boardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoard(boardId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Board> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getBoard(boardId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get boards by owner
         * @summary getBoardsByOwner
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardsByOwner(userId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Board>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getBoardsByOwner(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get user
         * @summary getUser
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getUser(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create token by user credentials and get userId
         * @summary login
         * @param {UserCredentials} [userCredentials] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(userCredentials?: UserCredentials, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginData> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).login(userCredentials, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add one vote for the note
         * @summary postVote
         * @param {number} noteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVote(noteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).postVote(noteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Refresh a token and get userId
         * @summary refreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginData> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).refreshToken(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a note
         * @summary updateNote
         * @param {number} noteId 
         * @param {UpdateBoardNote} [updateBoardNote] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNote(noteId: number, updateBoardNote?: UpdateBoardNote, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).updateNote(noteId, updateBoardNote, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create new board
         * @summary createBoard
         * @param {CreateBoard} [createBoard] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBoard(createBoard?: CreateBoard, options?: any) {
            return DefaultApiFp(configuration).createBoard(createBoard, options)(axios, basePath);
        },
        /**
         * Create a new note
         * @summary createNote
         * @param {CreateBoardNote} [createBoardNote] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNote(createBoardNote?: CreateBoardNote, options?: any) {
            return DefaultApiFp(configuration).createNote(createBoardNote, options)(axios, basePath);
        },
        /**
         * Create new user
         * @summary createUser
         * @param {UserCredentials} [userCredentials] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userCredentials?: UserCredentials, options?: any) {
            return DefaultApiFp(configuration).createUser(userCredentials, options)(axios, basePath);
        },
        /**
         * Delete a note
         * @summary deleteNote
         * @param {number} noteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNote(noteId: number, options?: any) {
            return DefaultApiFp(configuration).deleteNote(noteId, options)(axios, basePath);
        },
        /**
         * Delete one vote for the note
         * @summary deleteVote
         * @param {number} noteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVote(noteId: number, options?: any) {
            return DefaultApiFp(configuration).deleteVote(noteId, options)(axios, basePath);
        },
        /**
         * get board by Id
         * @summary getBoard
         * @param {number} boardId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoard(boardId: number, options?: any) {
            return DefaultApiFp(configuration).getBoard(boardId, options)(axios, basePath);
        },
        /**
         * Get boards by owner
         * @summary getBoardsByOwner
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBoardsByOwner(userId: number, options?: any) {
            return DefaultApiFp(configuration).getBoardsByOwner(userId, options)(axios, basePath);
        },
        /**
         * Get user
         * @summary getUser
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: number, options?: any) {
            return DefaultApiFp(configuration).getUser(userId, options)(axios, basePath);
        },
        /**
         * Create token by user credentials and get userId
         * @summary login
         * @param {UserCredentials} [userCredentials] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(userCredentials?: UserCredentials, options?: any) {
            return DefaultApiFp(configuration).login(userCredentials, options)(axios, basePath);
        },
        /**
         * Add one vote for the note
         * @summary postVote
         * @param {number} noteId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVote(noteId: number, options?: any) {
            return DefaultApiFp(configuration).postVote(noteId, options)(axios, basePath);
        },
        /**
         * Refresh a token and get userId
         * @summary refreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(options?: any) {
            return DefaultApiFp(configuration).refreshToken(options)(axios, basePath);
        },
        /**
         * Update a note
         * @summary updateNote
         * @param {number} noteId 
         * @param {UpdateBoardNote} [updateBoardNote] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNote(noteId: number, updateBoardNote?: UpdateBoardNote, options?: any) {
            return DefaultApiFp(configuration).updateNote(noteId, updateBoardNote, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Create new board
     * @summary createBoard
     * @param {CreateBoard} [createBoard] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBoard(createBoard?: CreateBoard, options?: any) {
        return DefaultApiFp(this.configuration).createBoard(createBoard, options)(this.axios, this.basePath);
    }

    /**
     * Create a new note
     * @summary createNote
     * @param {CreateBoardNote} [createBoardNote] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createNote(createBoardNote?: CreateBoardNote, options?: any) {
        return DefaultApiFp(this.configuration).createNote(createBoardNote, options)(this.axios, this.basePath);
    }

    /**
     * Create new user
     * @summary createUser
     * @param {UserCredentials} [userCredentials] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createUser(userCredentials?: UserCredentials, options?: any) {
        return DefaultApiFp(this.configuration).createUser(userCredentials, options)(this.axios, this.basePath);
    }

    /**
     * Delete a note
     * @summary deleteNote
     * @param {number} noteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteNote(noteId: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteNote(noteId, options)(this.axios, this.basePath);
    }

    /**
     * Delete one vote for the note
     * @summary deleteVote
     * @param {number} noteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteVote(noteId: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteVote(noteId, options)(this.axios, this.basePath);
    }

    /**
     * get board by Id
     * @summary getBoard
     * @param {number} boardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBoard(boardId: number, options?: any) {
        return DefaultApiFp(this.configuration).getBoard(boardId, options)(this.axios, this.basePath);
    }

    /**
     * Get boards by owner
     * @summary getBoardsByOwner
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBoardsByOwner(userId: number, options?: any) {
        return DefaultApiFp(this.configuration).getBoardsByOwner(userId, options)(this.axios, this.basePath);
    }

    /**
     * Get user
     * @summary getUser
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser(userId: number, options?: any) {
        return DefaultApiFp(this.configuration).getUser(userId, options)(this.axios, this.basePath);
    }

    /**
     * Create token by user credentials and get userId
     * @summary login
     * @param {UserCredentials} [userCredentials] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(userCredentials?: UserCredentials, options?: any) {
        return DefaultApiFp(this.configuration).login(userCredentials, options)(this.axios, this.basePath);
    }

    /**
     * Add one vote for the note
     * @summary postVote
     * @param {number} noteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postVote(noteId: number, options?: any) {
        return DefaultApiFp(this.configuration).postVote(noteId, options)(this.axios, this.basePath);
    }

    /**
     * Refresh a token and get userId
     * @summary refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refreshToken(options?: any) {
        return DefaultApiFp(this.configuration).refreshToken(options)(this.axios, this.basePath);
    }

    /**
     * Update a note
     * @summary updateNote
     * @param {number} noteId 
     * @param {UpdateBoardNote} [updateBoardNote] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateNote(noteId: number, updateBoardNote?: UpdateBoardNote, options?: any) {
        return DefaultApiFp(this.configuration).updateNote(noteId, updateBoardNote, options)(this.axios, this.basePath);
    }

}
